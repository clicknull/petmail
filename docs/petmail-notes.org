
Unsorted design notes.

* forward-secrecy
** basically we need to change the encryption key after each message. The
   recipient gives the sender a new key, the sender uses it until they
   receive the next one (perhaps after a single message, or on some time
   schedule). Sender deliberately forgets the previous key.
** different schemes:
*** Symmetric key. Must be unique to each sender/recipient pair. Both sides
    must hold it until the key rotates. If either side reveals it, all
    messages are compromised. Provides both confidentiality and
    authentication (no other sender knows the key).
*** pair-wise curve25519 keys. Each sender/recipient pair has two keypairs.
    Provides both confidentiality and authentication. Must hold the sending
    key until the other side stops using it to authenticate you, must hold
    the receiving key until the other side stops using it to encrypt to you.
*** recipient curve25519 key, sender ephemeral curve25519 key, sender
    long-term ed25519 key. Each message (or at least the ephemeral sending
    key) is signed to get authenticity. Sender uses new keypair for each
    message, discards privkey as soon as the message is encrypted, minimizing
    exposure window of sender. Recipient switches keys periodically. Sender
    remembers recipient pubkey until notified of the next one. Recipient
    holds privkey until the message has been read and destroyed.
** last one seems most useful
** addressbook entries contain:
*** for outbound messages: "them" section holds next-message curve25519
    public "to" key (replaced when they rotate it), "me" section holds my
    long-term ed25519 signing key (different for each recipient)
*** for inbound messages: "them" section holds their long-term ed25519
    verifying key. "me" section holds current/recent curve25519 private keys
    (discarded when historical messages are destroyed and sender has acked
    rotation)
** note that using different recipient pubkeys over time (per sender) enables
   the mailbox to distinguish senders. Would need an extra layer of wrapping
   to prevent that.
*** mailbox gets box(to=mailbox,from=ephem1,A)
*** A contains box(to=stable-recip, from=ephem2, B)
*** mailbox decrypts A to get B, gives B to recipient
*** B contains box(to=current-recip, from=ephem3, C)
*** recipient decrypts B to get C, C is actual inner message
*** current-recip is rotated. stable-recip is the same for all senders and
    all time, and is used as the client identifier
*** if current-recip is rotated frequently enough, you could get away without
    the extra layer (if every sender+message pair used a different recipient
    key). Seems fragile though.
*** forward security of stable-recip: compromise of that key enables
    mailboxes to distinguish senders.

* repudiation
** general goal is for message recipient to be convinced of the sender, but
   nobody else
** signing message content rules that out
** sending a MAC key in a way that can only be read by the recipient works
** signing an ephmeral pubkey works
*** box(to=recip,from=ephem,msg=(sign(by=sender,msg=ephem)+body))

* message format
** so, to obtain sender-indistinguishability-by-mailbox, forward-security for
   message contents, and sender-repudiability of messages, use this:
** mailbox gets box(to=mailbox,from=ephem1,A)
** A contains box(to=stable-recip, from=ephem2, B)
*** stable-recip is the same for all senders, for all messages, and is the
    client identifier that the mailbox uses to route the message
*** mailbox decrypts A to get B, gives B to recipient
** B contains box(to=current-recip, from=ephem3, C)
*** recipient decrypts B to get C
** C contains sign(by=stable-sender, msg=ephem3) and actual body

